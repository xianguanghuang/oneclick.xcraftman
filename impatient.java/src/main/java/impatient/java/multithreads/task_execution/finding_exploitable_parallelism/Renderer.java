/*------------------------------------------------------------------------------
 * COPYRIGHT Ericsson 2014
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *----------------------------------------------------------------------------*/
package impatient.java.multithreads.task_execution.finding_exploitable_parallelism;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/*
 *
 *使用线程池去下载每一张单独的图片，提交下载任务的策略是是使用ExecutorCompletionService，
 *这样做的好处是每次调用take方法都会拿到下载完成的那个任务，跟提交的顺序无关 
 * */
public class Renderer {

    private static final long TIME_BUDGET = 0;
	private static final Ad DEFAULT_AD = null;
	private final ExecutorService executor = Executors.newFixedThreadPool(100);

    void renderPage(CharSequence source) {
        final List<ImageInfo> imageInfos = scanForImageInfo(source);
        CompletionService<ImageData> completionService = new ExecutorCompletionService<ImageData>(executor);
        
        for(final ImageInfo imageInfo : imageInfos)
        	completionService.submit(new Callable<ImageData>(){

				@Override
				public ImageData call() throws Exception {
					// TODO Auto-generated method stub
					return imageInfo.downloadImage();
				}
        	
        	});
        	

        renderText(source);

        try {
            for (int t = 0 , n = imageInfos.size(); t < n; t++) {
                Future<ImageData> f = completionService.take();
                ImageData imageData = f.get();
            	renderImage(imageData);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } catch (ExecutionException e) {
            throw launderThrowable(e.getCause());
        }

    }
    
    Page renderPageWithAd() throws InterruptedException{
    	long endNanos = System.nanoTime() + TIME_BUDGET;
    	Future<Ad> f = executor.submit(new FetchAdTask());
    	
    	//Render the page while waiting for the ad
    	Page page = renderPageBody();
    	Ad ad;
    	try{
    		//Only wait for the remaining time budget
    		long timeLeft = endNanos - System.nanoTime();
    		ad = f.get(timeLeft, TimeUnit.NANOSECONDS);
    	}catch (ExecutionException e){
    		ad = DEFAULT_AD;
    	}catch (TimeoutException e){
    		ad = DEFAULT_AD;
    		f.cancel(true);
    	}
    	page.setAd(ad);
    	return page;
    	
    }
    
    public List<TravelQuote> getRankedTravelQuotes(TravelInfo travelInfo, Set<TravelCompany> companies,
    		Comparator<TravelQuote> ranking, long time, TimeUnit unit) throws InterruptedException{
    	List<QuoteTask> tasks = new ArrayList<QuoteTask>();
    	for(TravelCompany company : companies)
    		tasks.add(new QuoteTask(company,travelInfo));
    	
    	List<Future<TravelQuote>> futures = executor.invokeAll(tasks,time,unit);
    	
    	List<TravelQuote> quotes = new ArrayList<TravelQuote>(tasks.size());
    	
    	Iterator<QuoteTask> taskIter = tasks.iterator();
    	
    	for(Future<TravelQuote> f : futures){
    		QuoteTask task = taskIter.next();
    		try {
				quotes.add(f.get());
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				quotes.add(task.getFailureQuote(e.getCause()));
			} catch (CancellationException e){
				quotes.add(task.getTimeoutQuote(e));
			}
    	}
    	Collections.sort(quotes,ranking);
    	return quotes;
    }

    private Page renderPageBody() {
		// TODO Auto-generated method stub
		return null;
	}

    /*
     * future还可以在get的时候传入timeout参数，如果没在限定的时间内完成就抛出
     * timeout exception
     * 
     * */
	private RuntimeException launderThrowable(Throwable t) {
        if (t instanceof RuntimeException) {
            return (RuntimeException) t;
        } else if (t instanceof Error) {
            throw (Error) t;
        } else {
            throw new IllegalStateException("Not unchecked", t);
        }
    }

    private void renderImage(ImageData data) {
        // TODO Auto-generated method stub

    }

    private List<ImageInfo> scanForImageInfo(CharSequence source) {
        // TODO Auto-generated method stub
        return null;
    }

    private void renderText(CharSequence source) {
        // TODO Auto-generated method stub

    }
    
    public static class QuoteTask implements Callable<TravelQuote>{
    	private final TravelCompany company;
    	private final TravelInfo travelInfo;
		
    	public QuoteTask(TravelCompany company, TravelInfo travelInfo) {
			this.company = company;
			this.travelInfo = travelInfo;
		}

		public TravelQuote getTimeoutQuote(CancellationException e) {
			// TODO Auto-generated method stub
			return null;
		}

		public TravelQuote getFailureQuote(Throwable cause) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public TravelQuote call() throws Exception {
			// TODO Auto-generated method stub
			return company.solicitQuote(travelInfo);
		}
		
		
    	
    	
    }
    
    public static class TravelCompany{

		public TravelQuote solicitQuote(TravelInfo travelInfo) {
			// TODO Auto-generated method stub
			return null;
		}
    	
    }
    
    
    public static class TravelInfo{
    	
    }
    
    public static class TravelQuote{
    	
    }

    public static class ImageData {

    }

    public static class ImageInfo {

        public ImageData downloadImage() {
            // TODO Auto-generated method stub
            return null;
        }

    }
    
    public static class Page{

		public void setAd(Ad ad) {
			// TODO Auto-generated method stub
			
		}
    	
    }
    
    public static class Ad{
    	
    }
    
    public static class FetchAdTask implements Callable<Ad>{

		@Override
		public Ad call() throws Exception {
			// TODO Auto-generated method stub
			return null;
		}

    }
}
